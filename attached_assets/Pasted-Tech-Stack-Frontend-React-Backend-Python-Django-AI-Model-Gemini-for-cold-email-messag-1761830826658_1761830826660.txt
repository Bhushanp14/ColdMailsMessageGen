Tech Stack
•	Frontend: React
•	Backend: Python (Django)
•	AI Model: Gemini (for cold email/message generation)
________________________________________
Project Overview
Build a 1-page AI web application that helps users generate personalized cold emails and messages for potential clients — directly inside the app (no Excel uploads).
Users will input or paste business details into a dynamic table, click a button to generate AI-written cold outreach content, and instantly view the results in the same table.
________________________________________
User Flow
1.	Landing Page Display
o	When the user opens the app, they see:
	A pre-formatted, editable table with the following columns:
	Business_Name | Business_Description | Address/Region | Generated_Cold_Email | Generated_Cold_Message
	The first 3 columns are editable.
	The last 2 columns will be filled by AI.
o	Add placeholder rows (e.g., 3–5) with sample data for clarity.
2.	Data Input
o	Users can type or paste their client data directly into the table.
o	Provide buttons:
	“Add Row”
	“Delete Row”
	“Clear Table”
3.	AI Generation
o	When the user clicks:
	“Generate Cold Emails” → generates cold emails.
	“Generate Cold Messages” → generates short messages (e.g., for LinkedIn/WhatsApp).
o	On click:
	Disable inputs and show a loading spinner.
	Send the table data (JSON) to the Django backend.
4.	Backend Process
o	Django endpoint (/api/generate/) receives JSON array of client rows.
o	For each row:
	Send a prompt to Gemini using the following instruction:
	You are an expert in writing cold outreach emails and messages for businesses. 
	Write a personalized cold email (or message) encouraging the recipient to build 
	or redesign their website, highlighting how it will benefit their business. 
	Make it human, engaging, and persuasive. 
	Tone: professional but conversational.
	Input:
	Business Name: [Business_Name]
	Business Description: [Business_Description]
	Address/Region: [Address/Region]
o	Collect the AI responses and attach them back to each row.
o	Return the updated data (with generated emails/messages) to the frontend.
5.	Results Display
o	Once AI responses are received:
	Populate the “Generated_Cold_Email” and “Generated_Cold_Message” columns in the table.
	Allow users to scroll, copy, or edit the generated content.
6.	Optional Features
o	Button: “Export Results to Excel/CSV” (using a React CSV export library).
o	Button: “Clear All Rows.”
________________________________________
Frontend (React) Requirements
•	UI Components:
o	A clean header: “AI Cold Mail & Message Generator”
o	Dynamic table with editable cells (use a React table library like react-table or a custom editable grid).
o	Action buttons:
	Add Row / Delete Row
	Generate Cold Emails
	Generate Cold Messages
	Export Results
o	Loading indicators when generation is in progress.
o	Toast or banner notification for success/error.
•	Data Handling:
o	Manage table state using React hooks (useState, useEffect).
o	POST table data to Django via /api/generate/.
o	Display AI responses inline in the same table.
________________________________________
Backend (Django) Requirements
•	Create API endpoints:
o	/api/generate/ → Receives JSON table data, calls Gemini API, and returns updated JSON.
•	Example request format:
•	[
•	  {
•	    "Business_Name": "Acme Fitness",
•	    "Business_Description": "A local gym offering personal training.",
•	    "Address/Region": "New York, USA"
•	  },
•	  ...
•	]
•	Example response:
•	[
•	  {
•	    "Business_Name": "Acme Fitness",
•	    "Business_Description": "A local gym offering personal training.",
•	    "Address/Region": "New York, USA",
•	    "Generated_Cold_Email": "Hi John, I noticed Acme Fitness...",
•	    "Generated_Cold_Message": "Hey John, wanted to share how a new site..."
•	  },
•	  ...
•	]
•	Use requests or httpx to call Gemini’s API with the appropriate authentication key.
•	Handle exceptions and rate limits gracefully.
•	Use environment variables for API keys.
________________________________________
AI Integration (Gemini)
•	Use the Gemini API endpoint to generate text.
GEMINI_API_KEY="AIzaSyB0tkP9EVV8hU-xgRLTyRHqZUnbO0TAqaI"
•	Prompt structure:
o	Include the system instruction once.
o	For each business, send a formatted text prompt with placeholders replaced.
•	Ensure responses are concise and human-like.
________________________________________
Output
A deployed Replit app that allows users to:
✅ Enter or paste client data directly into an in-app table
✅ Generate cold emails/messages via AI instantly
✅ View results inline
✅ Optionally export the table to Excel/CSV

